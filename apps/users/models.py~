#CUSTOM MODELS for user handling
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.utils.encoding import smart_unicode

class GenericUserManager(BaseUserManager):
	def create_user(self, email, first_name, password=None):
		if not email:
			raise ValueError('Users must have an email')
		
		user = self.model (
			email = self.normalize_email(email),
			first_name=first_name,
			is_superuser=False,
			
		)
		
		user.set_password(password)
		user.save(using=self._db)
		return user
	
	def create_superuser(self, email, first_name, password):
		user = self.create_user(email, password=password, first_name=first_name)
		user.is_superuser = True
		user.save(using=self._db)
		return user

class GenericUser(AbstractBaseUser, PermissionsMixin):	
	is_active = models.BooleanField(default=True)
	is_admin = models.BooleanField(default=False)
	legajo = models.IntegerField(unique=True)
	email = models.EmailField (verbose_name='E-mail',max_length=255, db_index=True,unique=True)
	first_name = models.CharField (verbose_name="Nombre", max_length="30")
	
	USERNAME_FIELD = 'email'
	REQUIRED_FIELDS = ['first_name']
		
	
	def __unicode__(self):
		return smart_unicode(self.email)
		
	def get_name(self):
		return self.first_name
		
	objects = GenericUserManager()

	
class Student(GenericUser):
	pass
	
class Employee(GenericUser):
	pass
	

